(function($){function getSettings($el){return $el.data("heatmapSettings")}async function getData($el){const settings=getSettings($el);if(Array.isArray(settings.data)){return Promise.resolve(settings.data)}let xhr=$el.data("xhr")||null;if(xhr&&xhr.abort){xhr.abort();xhr=null}const query={year:settings.year||(new Date).getFullYear()};try{xhr=$.get(settings.data,query);$el.data("xhr",xhr);return await xhr}catch(error){throw error}finally{$el.data("xhr",null)}}function calculateWeeks(year,firstDayOfWeek){const startOfYear=new Date(year,0,1);const endOfYear=new Date(year,11,31);const startOfFirstWeek=getStartOfWeek(startOfYear,firstDayOfWeek);const endOfLastWeek=getEndOfWeek(endOfYear,firstDayOfWeek);const weeks=[];let currentDate=new Date(startOfFirstWeek);let currentWeek=[];while(currentDate<=endOfLastWeek){currentWeek.push(new Date(currentDate));if(currentWeek.length===7){weeks.push(currentWeek);currentWeek=[]}currentDate.setDate(currentDate.getDate()+1)}if(currentWeek.length>0){weeks.push(currentWeek)}return weeks}function getEndOfWeek(date,firstDayOfWeek){const startOfWeek=getStartOfWeek(date,firstDayOfWeek);const end=new Date(startOfWeek);end.setDate(startOfWeek.getDate()+6);end.setHours(23,59,59,999);return end}function getStartOfWeek(date,firstDayOfWeek){const diff=(date.getDay()-firstDayOfWeek+7)%7;const start=new Date(date);start.setDate(date.getDate()-diff);start.setHours(0,0,0,0);return start}function drawHeatmap($el){const settings=getSettings($el);const year=settings.year||(new Date).getFullYear();const locale=settings.locale||"en-US";const dayFormatter=new Intl.DateTimeFormat(locale,{weekday:"short"});const monthFormatter=new Intl.DateTimeFormat(locale,{month:"short"});const firstDayOfWeek=getFirstDayOfWeek(locale);let gutter=settings.gutter||"2px";if(typeof gutter==="number"){gutter=`${gutter}px`}else if(!isNaN(parseFloat(gutter))&&!/[a-z%]+$/i.test(gutter)){gutter=`${gutter}px`}const cellSize=settings.cellSize||14;const cellSizePx=`${cellSize}px`;const weeks=calculateWeeks(year,firstDayOfWeek);$el.empty();getData($el).then(data=>{if(!Array.isArray(data)){throw new Error("Die erhaltenen Daten sind kein Array.")}const counts=data.map(entry=>entry.count);const minCount=Math.min(...counts);const maxCount=Math.max(...counts);weeks.forEach(week=>{week.forEach((day,index)=>{const matchingData=data.find(entry=>{const entryDate=new Date(entry.date);return entryDate.getFullYear()===day.getFullYear()&&entryDate.getMonth()===day.getMonth()&&entryDate.getDate()===day.getDate()});week[index]={date:day,count:matchingData?matchingData.count:0}})});const heatmapContainer=$('<div class="heatmap-wrapper"></div>');heatmapContainer.css({display:"flex",flexDirection:"row",alignItems:"flex-start",gap:gutter});const dayLabelColumn=$('<div class="day-labels"></div>');dayLabelColumn.css({display:"grid",gridTemplateRows:`${cellSizePx} repeat(7, ${cellSizePx})`,marginRight:gutter,textAlign:"right",rowGap:gutter});dayLabelColumn.append("<div></div>");Array.from({length:7},(_,i)=>(firstDayOfWeek+i)%7).forEach(dayIndex=>{const tempDate=new Date(2024,0,dayIndex);const label=$('<div class="day-label"></div>');label.text(dayFormatter.format(tempDate));label.css({fontSize:"10px",color:"#666",lineHeight:cellSizePx});dayLabelColumn.append(label)});heatmapContainer.append(dayLabelColumn);const heatmapGrid=$('<div class="heatmap"></div>');heatmapGrid.css({display:"flex",gap:gutter});let lastRenderedMonth=-1;weeks.forEach(week=>{const weekColumn=$('<div class="heatmap-week"></div>');weekColumn.css({display:"grid",gridTemplateRows:`${cellSizePx} repeat(7, ${cellSizePx})`,rowGap:gutter});const currentMonth=week.find(d=>d.date&&d.date.getDate()===1)?.date.getMonth();if(currentMonth!==undefined&&currentMonth!==lastRenderedMonth){lastRenderedMonth=currentMonth;const monthLabel=$('<div class="month-label"></div>');monthLabel.text(monthFormatter.format(week.find(d=>d.date&&d.date.getDate()===1).date));monthLabel.css({textAlign:"center",fontSize:`${Math.min(cellSize-4,12)}px`,lineHeight:cellSizePx,height:cellSizePx,width:cellSizePx,margin:"0",overflow:"visible",whiteSpace:"nowrap",padding:"0",backgroundColor:"transparent"});weekColumn.append(monthLabel)}else{weekColumn.append('<div style="height: '+cellSizePx+';"></div>')}week.forEach(dayEntry=>{const cell=$('<div class="heatmap-cell"></div>');cell.css({width:cellSizePx,height:cellSizePx,backgroundColor:getContributionColor($el,dayEntry.count,minCount,maxCount),borderRadius:"2px",cursor:"pointer"});if(dayEntry.date){cell.attr("title",`Datum: ${dayEntry.date.toLocaleDateString(locale)}, EintrÃ¤ge: ${dayEntry.count}`)}weekColumn.append(cell)});heatmapGrid.append(weekColumn)});heatmapContainer.append(heatmapGrid);$el.append(heatmapContainer)}).catch(err=>{console.error("Fehler beim Laden der Daten:",err);$el.append(`<div class="heatmap-error">${err.message||err}</div>`)})}function getFirstDayOfWeek(locale){const mondayFirstLocales=["de","fr","es","it"];return mondayFirstLocales.some(l=>locale.startsWith(l))?1:0}function getContributionColor($el,count,minCount,maxCount){const settings=getSettings($el);if(count===0){return settings.colors["0"]}const range=maxCount-minCount||1;const percentage=(count-minCount)/range;const colorKeys=Object.keys(settings.colors).map(Number).sort((a,b)=>a-b).filter(key=>key<=percentage);return settings.colors[colorKeys.pop()]||settings.colors["1"]}$.fn.heatmap=function(options,params){if($(this).length>1){return $(this).each(function(i,element){return $(element).heatmap(options,params)})}const $element=$(this);const methodCalled=typeof options==="string";const isInitialized=$element.data("heatmapSettings");const DEFAULTS={debug:true,classes:"border border-5 w-100 p-5",data:null,gutter:2,cellSize:14,colors:{0:"#ebedf0",.25:"#c6e48b",.5:"#7bc96f",.75:"#239a3b",1:"#196127"}};if(!isInitialized){init($element,options)}else{console.log("heatmap:isInitialized")}function init($el,settings){const setup=$.extend({},DEFAULTS,settings||{});if(setup.debug){console.log("heatmap:init",setup)}$el.data("heatmapSettings",setup);drawHeatmap($el)}if(methodCalled){switch(options){case"setData":{const setup=$element.data("heatmapSettings");if(setup.debug){console.log("heatmap:setData",params)}setup.data=params;$element.data("heatmapSettings",setup);drawHeatmap($element)}break}}return $element}})(jQuery);