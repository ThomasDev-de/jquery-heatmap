(function($){$.heatmap={setDefaults:function(options){this.DEFAULTS=$.extend({},this.DEFAULTS,options||{})},getDefaults:function(){return this.DEFAULTS},DEFAULTS:{startDate:`${(new Date).getFullYear()}-01-01`,endDate:`${(new Date).getFullYear()}-12-31`,locale:"en-US",debug:false,classes:"border border-5 w-100 p-5",data:null,gutter:2,cellSize:14,colors:{0:"#ebedf0",.25:"#c6e48b",.5:"#7bc96f",.75:"#239a3b",1:"#196127"},titleFormatter(locale,date,count,$el){const id=$el.attr("id")||"";return id+" "+date.toLocaleDateString()+" - "+count},queryParams(p){return p}}};function init($el,settings,draw){const setup=$.extend({},$.heatmap.DEFAULTS,settings||{});const localizedMoment=moment();const locale=setup.locale||$.heatmap.DEFAULTS.locale;localizedMoment.locale(locale);const firstDayOfWeek=getFirstDayOfWeek(localizedMoment);setup.startDate=adjustStartDate(setup.startDate,locale,firstDayOfWeek,setup.debug);$el.data("heatmapSettings",setup);if(setup.debug){console.log("heatmap:init:",$el.data("heatmapSettings"))}if(draw){drawHeatmap($el,localizedMoment);$el.trigger("init.heatmap",[$el])}}function getSettings($el){return $el.data("heatmapSettings")}async function getData($el){const settings=getSettings($el);if(Array.isArray(settings.data)){return Promise.resolve(settings.data)}let xhr=$el.data("xhr")||null;if(xhr&&xhr.abort){xhr.abort();xhr=null}const query={startDate:settings.startDate||`${(new Date).getFullYear()}-01-01`,endDate:settings.endDate||`${(new Date).getFullYear()}-12-31`};const customQuery=typeof settings.queryParams==="function"?settings.queryParams():{};const finalQuery={...customQuery,...query};try{xhr=$.ajax({url:settings.data,method:"GET",data:finalQuery,dataType:"json"});$el.data("xhr",xhr);await xhr;if(xhr.status===200){if(settings.debug){console.log("getData: Successful Response:",xhr.responseJSON)}$el.data("xhr",null);return xhr.responseJSON}else{throw new Error(`getData: Fehlerhafter Statuscode ${xhr.status}: ${xhr.statusText}`)}}catch(error){$el.data("xhr",null);if(settings.debug){console.error("getData:error",error)}throw error}}function calculateWeeks($el,startDate,endDate,firstDayOfWeek){const settings=getSettings($el);const start=getStartOfWeek(new Date(startDate),firstDayOfWeek);const end=getEndOfWeek(new Date(endDate),firstDayOfWeek);if(settings.debug){console.log("DEBUG: calculateWeeks:",{startDate:startDate,endDate:endDate,firstDayOfWeek:firstDayOfWeek,start:start.toISOString(),end:end.toISOString()})}const weeks=[];let currentDate=new Date(start);while(currentDate<=end){const currentWeek=[];for(let i=0;i<7;i++){currentWeek.push(new Date(currentDate));currentDate.setDate(currentDate.getDate()+1)}weeks.push(currentWeek)}if(settings.debug){console.log("DEBUG: Berechnete Wochen:",weeks)}return weeks}function getEndOfWeek(date,firstDayOfWeek){const startOfWeek=getStartOfWeek(date,firstDayOfWeek);const end=new Date(startOfWeek);end.setDate(startOfWeek.getDate()+6);end.setHours(23,59,59,999);return end}function getStartOfWeek(date,firstDayOfWeek){const currentDay=date.getDay();const diff=(currentDay-firstDayOfWeek+7)%7;const start=new Date(date);start.setDate(date.getDate()-diff);start.setHours(0,0,0,0);return start}function drawHeatmap($el,myMoment){const settings=getSettings($el);if(!settings){console.error("Keine Heatmap-Einstellungen gefunden, Abbruch");return}if(settings.debug){console.log("heatmap:drawHeatmap")}const currentYear=(new Date).getFullYear();const startDate=settings.startDate||`${currentYear}-01-01`;const endDate=settings.endDate||`${currentYear}-12-31`;if(settings.debug){console.log(`Heatmap-Zeitraum: ${startDate} bis ${endDate}`)}const monthFormatter=new Intl.DateTimeFormat(myMoment.locale(),{month:"short"});const firstDayOfWeek=getFirstDayOfWeek(myMoment);let gutter=settings.gutter!==undefined?settings.gutter:"2px";if(typeof gutter==="number"){gutter=`${gutter}px`}const cellSize=settings.cellSize||14;const cellSizePx=`${cellSize}px`;const weeks=calculateWeeks($el,startDate,endDate,firstDayOfWeek);$el.empty();getData($el).then(rawData=>{const data=Array.isArray(rawData)?rawData:JSON.parse(rawData);if(!Array.isArray(data)){throw new Error("Die erhaltenen Daten sind kein Array.")}if(settings.debug){console.log("heatmap:drawHeatmap:data",data)}const dataMap=new Map(data.map(entry=>[entry.date,entry.count]));const counts=data.map(entry=>entry.count).filter(count=>typeof count==="number"&&count>=0);if(counts.length===0){throw new Error("Keine gültigen Werte für die Min-/Max-Berechnung gefunden.")}const minCount=Math.min(...counts);const maxCount=Math.max(...counts);if(settings.debug){console.log("DEBUG: Min-/Max-Werte:",{minCount:minCount,maxCount:maxCount})}const colorCache={};function getCachedColor(count){const cacheKey=`${count}-${minCount}-${maxCount}`;if(colorCache[cacheKey]){return colorCache[cacheKey]}const color=getContributionColor($el,count,minCount,maxCount);colorCache[cacheKey]=color;return color}weeks.forEach(week=>{week.forEach((day,index)=>{const dayKey=day.toISOString().split("T")[0];week[index]={date:day,count:dataMap.get(dayKey)||0}})});const heatmapContainer=$('<div class="heatmap-wrapper"></div>');heatmapContainer.css({display:"flex",flexDirection:"row",alignItems:"flex-start",gap:gutter});const placeholder=$('<div class="month-placeholder"></div>');placeholder.css({height:cellSizePx,width:"100%"});const dayLabelColumn=$('<div class="day-labels"></div>');dayLabelColumn.append(placeholder);dayLabelColumn.css({display:"grid",gridTemplateRows:`${cellSizePx} repeat(7, ${cellSizePx})`,marginRight:gutter,textAlign:"right",rowGap:gutter});const heatmapYear=new Date(settings.startDate||(new Date).getFullYear()).getFullYear();const firstDayOfWeek=getFirstDayOfWeek(myMoment);Array.from({length:7},(_,i)=>(firstDayOfWeek+i)%7).forEach(dayOffset=>{const tempDate=myMoment.clone().isoWeekday(dayOffset===0?7:dayOffset);const label=$('<div class="day-label"></div>');label.text(tempDate.format("ddd"));label.css({fontSize:`${cellSize*.7}px`,color:"#666",textAlign:"center",lineHeight:cellSizePx});dayLabelColumn.append(label)});heatmapContainer.append(dayLabelColumn);const heatmapGrid=$('<div class="heatmap"></div>');heatmapGrid.css({display:"flex",gap:gutter});let lastRenderedMonth=-1;weeks.forEach(week=>{const weekColumn=$('<div class="heatmap-week"></div>');weekColumn.css({display:"grid",gridTemplateRows:`${cellSizePx} repeat(7, ${cellSizePx})`,rowGap:gutter});const currentMonth=week.find(d=>d.date&&d.date.getDate()===1)?.date.getMonth();if(currentMonth!==undefined&&currentMonth!==lastRenderedMonth){lastRenderedMonth=currentMonth;const monthLabel=$('<div class="month-label"></div>');monthLabel.text(monthFormatter.format(week.find(d=>d.date&&d.date.getDate()===1).date));monthLabel.css({textAlign:"left",fontSize:`${cellSize*.7}px`,lineHeight:cellSizePx,height:cellSizePx,width:cellSizePx});weekColumn.append(monthLabel)}else{weekColumn.append('<div style="height: '+cellSizePx+';"></div>')}week.forEach(dayEntry=>{const cell=$('<div class="heatmap-cell"></div>');cell.css({width:cellSizePx,height:cellSizePx,backgroundColor:getCachedColor(dayEntry.count),borderRadius:parseInt(gutter)>2?"2px":gutter,cursor:"pointer"});if(dayEntry.date){cell.attr("data-toggle","tooltip").attr("data-html",true).attr("data-bs-toggle","tooltip").attr("data-bs-html",true).attr("title",settings.titleFormatter(settings.locale,dayEntry.date,dayEntry.count,$el)||"")}weekColumn.append(cell)});heatmapGrid.append(weekColumn)});heatmapContainer.append(heatmapGrid);$el.append(heatmapContainer);$el.trigger("post.heatmap",[$el,data])}).catch(err=>{console.error("Fehler beim Laden der Daten:",err);$el.append(`<div class="heatmap-error">${err.message||err}</div>`)}).finally(()=>{})}function findStartOfWeek(date,firstDayOfWeek){const currentDay=date.getDay();const diff=(currentDay-firstDayOfWeek+7)%7;const startOfWeek=new Date(date);startOfWeek.setDate(date.getDate()-diff);startOfWeek.setHours(0,0,0,0);return startOfWeek}function getFirstDayOfWeek(myMoment){return myMoment.localeData().firstDayOfWeek()}function getContributionColor($el,count,minCount,maxCount){const settings=getSettings($el)||{colors:$.heatmap.DEFAULTS.colors};if(!settings.colors||Object.keys(settings.colors).length===0){if(settings.debug){console.error("Farbskala fehlt in settings:",settings)}return"#ff0000"}if(count===0){return settings.colors["0"]}const rangeLog=Math.log10(maxCount+1)-Math.log10(minCount+1);const percentage=(Math.log10(count+1)-Math.log10(minCount+1))/rangeLog;const scaledPercentage=Math.max(0,Math.min(percentage,1));const colorKeys=Object.keys(settings.colors).map(Number).sort((a,b)=>a-b);let matchedKey=colorKeys.find(key=>scaledPercentage<=key)||Math.max(...colorKeys);if(scaledPercentage===0&&settings.colors["0"]!==undefined){matchedKey=0}if(settings.debug){console.log("DEBUG: Farbzuordnungskontrolle:",{count:count,minCount:minCount,maxCount:maxCount,rangeLog:rangeLog,scaledPercentage:scaledPercentage,matchedKey:matchedKey,color:settings.colors[matchedKey]})}return settings.colors[matchedKey]||settings.colors["1"]}function adjustStartDate(startDate,locale,firstDayOfWeek,debug){if(!startDate){return null}const originalStartDate=new Date(startDate);const adjustedStartDate=findStartOfWeek(originalStartDate,firstDayOfWeek);const formattedStartDate=adjustedStartDate.toISOString().split("T")[0];if(debug){console.log("DEBUG: Startdatum angepasst:",{original:originalStartDate.toISOString(),adjusted:adjustedStartDate.toISOString(),formatted:formattedStartDate,firstDayOfWeek:firstDayOfWeek,locale:locale})}return formattedStartDate}$.fn.heatmap=function(options,params){if($(this).length>1){return $(this).each(function(i,element){return $(element).heatmap(options,params)})}const $element=$(this);const momentForHeatmap=moment();const methodCalled=typeof options==="string";const isInitialized=$element.data("heatmapSettings");if(!isInitialized){console.log(">>>>>>>>>>>>>><<",options);init($element,options,!methodCalled)}if(!methodCalled){return $element}switch(options){case"updateOptions":{const setup=$element.data("heatmapSettings");if(setup.debug){console.log("heatmap:updateOptions",params)}const updatedSetup=$.extend({},$.heatmap.DEFAULTS,setup,params||{});const myMoment=moment().locale(updatedSetup.locale||$.heatmap.DEFAULTS.locale);const firstDayOfWeek=getFirstDayOfWeek(myMoment);updatedSetup.startDate=adjustStartDate(updatedSetup.startDate,updatedSetup.locale,firstDayOfWeek,updatedSetup.debug);$element.data("heatmapSettings",updatedSetup);drawHeatmap($element,myMoment)}break}return $element}})(jQuery);